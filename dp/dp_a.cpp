/* 
*******************************************************************************
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠦⠹⣿⣷⡌⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⣉⣠⣤⣶⣾⣶⣤⣼⣿⣷⠀⣄⣈⣉⠙⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢻⣿⣿⣿⣿⣿⣷⣦⡀⠙⠻⠿⠛⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣁⣴⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠸⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⢶⡆⠀⠀⠀⠈⠉⠉⠛⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢁⣴⣿⠃⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⢻⣿⣿⣿⣿⣿⣿⣿⣧⠀⠘⣿⡖⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⠋⣰⣿⣿⡇⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠘⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠈⢿⡶⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⠟⠁⣼⣿⣿⣿⠀⣼⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⠀⣿⣿⣿⡆⠸⣿⣿⣿⣿⣿⣧⠸⣿⣧⡀⠈⢶⣶⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⠿⠟⠋⠁⢀⣾⣿⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⡏⢸⣿⣿⣇⠸⣿⣿⣿⡄⢻⣿⣿⣿⣿⣿⡄⢿⣿⣷⣄⠀⠑⢶⡆⢰⣿⣿⣿⣿⣿⣿⣿⣿
⡏⠀⠀⠀⠀⠀⣾⣿⡿⣿⣾⣿⡄⢹⣿⣿⣿⣿⣿⣿⡇⠘⣿⣿⣿⡄⢻⣿⣿⣿⡀⢿⣿⣿⣿⣿⣇⢸⣿⣿⣿⣧⢀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿
⣧⠀⠀⠀⠀⣸⣿⣿⠁⣿⣿⣿⡇⠘⣿⣿⣿⣿⣿⣿⣷⠀⠙⣿⣿⣷⡀⠻⣿⣿⣷⡈⢿⣿⣿⣿⣿⠈⣿⣿⣿⣿⡈⢿⣦⡀⠈⢿⣿⣿⣿⣿⣿⣿⣿
⣿⡄⠀⠀⢰⣿⡟⢿⡄⣿⣿⣿⡇⠀⠙⢿⣿⣿⣿⣿⣿⡀⢶⡈⢻⣿⣧⡀⠙⢿⣿⣷⡈⢿⣿⣿⣿⡄⣿⣿⣿⣿⣷⠐⣿⣷⡄⠈⢿⣿⣿⣿⣿⣿⣿
⣿⣧⠀⢀⣿⣿⠇⣿⠇⢸⣿⣿⡇⢸⣷⡈⠻⢿⣿⣿⣿⡅⠸⣿⣦⡙⠻⣷⡈⢆⡙⢿⣷⠈⣿⣿⣿⡇⢸⣿⣿⣿⣿⣇⠸⣿⣿⣆⠈⢽⣿⣿⣿⣿⣿
⣿⣿⠇⢸⣿⣿⢐⡟⠀⡀⢻⣿⡇⢸⣿⣿⣷⣤⣉⠙⠻⠿⠆⠀⢬⣌⣱⣤⣍⣀⡙⠂⠉⠃⠸⣿⣿⡇⢸⣿⣿⣿⣿⣿⡄⢻⣿⣻⡄⠘⣿⣿⣿⣿⣿
⣿⡟⠀⣿⣿⣿⢸⠃⣰⣿⣄⠹⡧⠘⠋⣩⣴⣿⣿⣿⣿⣶⣾⣶⣤⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢾⣿⡇⢸⣿⣿⣿⣿⣿⣧⠈⣾⣿⣷⠀⠸⣿⣿⣿⣿
⣿⠃⢠⣿⣿⣿⠀⢠⣿⣿⣿⣦⣌⣚⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠟⠛⠛⠃⢸⣿⡇⢸⣿⣿⣿⣿⣿⢷⡆⢸⣿⣿⢠⡀⠹⣿⣿⣿
⡿⠀⢸⣿⣿⣿⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⢛⡉⠁⠀⠀⠰⢎⣀⠸⣿⡇⢸⣿⣿⣿⣿⣿⣽⣧⠘⣿⣿⠘⣇⠀⢿⣿⣿
⡇⠀⡜⣿⣿⣿⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠉⠐⣊⣉⣤⣶⣾⣿⣿⣿⣿⡀⣿⡇⢸⣿⣿⣿⣿⣾⣿⣿⡄⣿⣿⠀⣿⠀⠘⣿⣿
⠇⢰⡆⣿⣿⣿⡀⢸⣿⣿⣿⠟⠛⠉⠁⠀⠄⠀⢀⣩⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⡿⣿⠿⣿⡇⢿⡇⣿⣿⣿⣿⣿⣿⣿⣿⡇⢹⣿⢀⡏⢰⠀⢿⣿
⠀⢸⡇⢻⣿⣿⡇⠀⡿⠋⠠⠞⢂⣠⣤⣴⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⢹⣇⠨⣄⣨⣄⣸⡇⢸⠇⣾⣿⣿⣿⣷⣿⣿⣿⡇⢸⣿⢸⡇⣸⡇⠘⣿
⠀⢺⣧⠸⣿⣿⣿⠀⢧⣤⣶⣾⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⡷⢸⠀⣿⣿⣿⣿⣯⣿⣿⣿⡇⢸⡟⠼⢀⣿⣿⠀⣿
⠀⡈⢿⡆⢻⣿⣿⡆⢸⣿⣿⠇⢹⣉⣻⣤⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⢉⣼⣿⣿⣿⣿⣿⡇⠘⢸⣿⣿⣿⣿⣟⣿⣿⣿⡇⢸⣧⠃⣼⣿⣿⡄⢻
⠀⣷⠘⣷⡈⣿⣿⣷⠀⣿⣿⣷⣿⣿⣿⣿⡿⣿⣿⡿⠿⠛⣋⣩⡥⠖⣂⣴⣿⣿⣿⣿⣿⣿⣿⣿⠀⣾⣿⣿⣿⣿⣿⢿⣿⣿⠇⣿⠏⣰⣿⣿⣿⡃⢸
⠀⣿⣧⠸⣧⠘⣿⣿⡇⢸⣿⣿⣿⣿⣿⣿⣶⣤⣤⣈⣩⣭⣭⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⡾⢰⣿⣿⣿⣿⣿⣿⣻⣿⣿⢀⡏⣠⣿⣿⣿⣿⠀⢻
⠀⢻⣿⣧⠙⣧⠸⣿⣷⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⣁⣴⡿⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⡗⢈⣴⣿⣿⣿⣿⣿⠀⣿
⡇⠘⣿⣿⣧⡘⢧⡘⢿⣧⣄⣉⡛⠛⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⠿⠿⠟⠋⠁⣠⣴⡿⠟⣉⡄⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣼⣿⣿⣿⣿⣿⠏⢰⣿
⣿⡀⢹⣿⣿⢷⡌⠻⣎⠻⣿⣿⣿⣿⣿⠂⣶⣶⡶⠶⣦⡀⠶⣶⣄⠀⢀⣴⡿⠟⣩⣴⣾⣿⠁⣾⣿⣿⣿⣿⣿⣿⣿⣿⠍⢠⣿⣿⣿⣿⣿⠟⢠⣿⣿
⣿⣷⡀⢻⣯⠘⣿⣦⡙⢷⣿⣿⣿⣿⣿⡄⠹⣿⣿⣦⡙⠿⣶⣌⡛⠧⠘⣉⣴⣾⣿⣿⣿⠏⢀⣿⣿⣿⣿⣿⣿⣿⡿⠟⣀⣼⣿⣿⣿⡿⠋⣠⣾⣿⣿
⣿⣿⣷⡀⠻⡀⠘⢿⣿⣤⡙⠻⣿⣿⣿⡇⠀⠈⠻⢿⣿⣶⣌⣉⠉⣡⣾⣿⣿⣿⡿⠟⠁⠀⣿⣿⣿⣿⣿⣿⠟⠋⢰⣾⣿⣿⡿⠟⢋⣠⣾⣿⣿⣿⣿
⣿⣿⣿⣿⣄⠁⠀⠤⠙⠻⣿⣷⣤⣍⣙⠻⠀⢸⣷⣦⣤⣉⣉⡉⠀⣿⣿⣿⡿⠋⠀⠀⠀⠐⠿⠿⠛⠛⠉⠀⠀⠀⠀⢤⣤⣴⣶⣶⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣧⠄⠈⠻⠦⢤⣉⣙⠛⠛⠻⠇⠈⢻⣿⣿⣿⡟⣰⠄⣿⠟⠁⠀⠀⠀
********************************************************************************

N stones [1,2,3,...,N] for i belongs (1 <= i <= N)
for i+1 or i + 2; cost [hi - hj] is
Find mininum possible cost frog reaches stone N.

3
4
10 30 40 20
2
10 10
6
30 10 60 10 60 50

*/
#include<bits/stdc++.h>
using namespace std;

#define fio         ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define int 		long long
#define pb  		push_back
#define ppb 		pop_back
#define pf 			push_front
#define ppf 		pop_front
#define all(x) 		(x).begin(),(x).end()
#define fr 			first 
#define sc 			second 
#define rep(i,a,b)	for(int i=a;i<b;i++)
#define gcd(a, b)   __gcd(a, b);
using ii = pair<int,int>;
typedef pair<int,int> pii;
typedef pair<int, string> pis;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<ii> VII;
typedef vector<VI> VVI;
typedef map<int,int> MPII;
typedef set<int> SETI;
typedef multiset<int> MSETI;


void solve() {
    int dp[100100];
    int n;cin>>n;
    vector<int> h(n);
    for(int i=0;i<n;i++){
        cin>>h[i];
    }


    dp[0] = 0;
    dp[1] = abs(h[1]-h[0]);
    for(int i=2; i<n;i++){
        dp[i] = min(dp[i-1]+abs(h[i]-h[i-1]), dp[i-2]+abs(h[i]-h[i-2]));
        // cout<<"dp["<<i<<"]: "<<dp[i]<<endl;
    }

    cout<<dp[n-1]<<endl;
}


signed main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);

#ifndef ONLINE_JUDGE
    freopen("../input.txt","r",stdin);
    freopen("../output.txt","w",stdout);
#endif 

    // int t;cin>>t;
    int t = 1;
    while(t--){
        solve();
    }
}